{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\nimport {ViewEncapsulation} from '@angular/core';\n\nimport {analyzeAndValidateNgModules, extractProgramSymbols, loadNgModuleDirectives} from '../aot/compiler';\nimport {StaticAndDynamicReflectionCapabilities} from '../aot/static_reflection_capabilities';\nimport {StaticReflector, StaticReflectorHost} from '../aot/static_reflector';\nimport {CompileDirectiveMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {ParseError} from '../parse_util';\nimport {PipeResolver} from '../pipe_resolver';\nimport {Console} from '../private_import_core';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {createOfflineCompileUrlResolver} from '../url_resolver';\n\nimport {I18NHtmlParser} from './i18n_html_parser';\nimport {MessageBundle} from './message_bundle';\n\nexport interface ExtractorOptions {\n  includeFilePattern?: RegExp;\n  excludeFilePattern?: RegExp;\n}\n\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticReflectorHost {\n  /**\n   * Loads a resource (e.g. html / css)\n   */\n  loadResource(path: string): Promise<string>;\n}\n\nexport class Extractor {\n  constructor(\n      private options: ExtractorOptions, public host: ExtractorHost,\n      private staticReflector: StaticReflector, private messageBundle: MessageBundle,\n      private metadataResolver: CompileMetadataResolver) {}\n\n  extract(rootFiles: string[]): Promise<MessageBundle> {\n    const programSymbols = extractProgramSymbols(this.staticReflector, rootFiles, this.options);\n    const {ngModuleByPipeOrDirective, files, ngModules} =\n        analyzeAndValidateNgModules(programSymbols, this.options, this.metadataResolver);\n    return loadNgModuleDirectives(ngModules).then(() => {\n      const errors: ParseError[] = [];\n\n      files.forEach(file => {\n        const compMetas: CompileDirectiveMetadata[] = [];\n        file.directives.forEach(directiveType => {\n          const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n          if (dirMeta && dirMeta.isComponent) {\n            compMetas.push(dirMeta);\n          }\n        });\n        compMetas.forEach(compMeta => {\n          const html = compMeta.template.template;\n          const interpolationConfig =\n              InterpolationConfig.fromArray(compMeta.template.interpolation);\n          errors.push(\n              ...this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));\n        });\n      });\n\n      if (errors.length) {\n        throw new Error(errors.map(e => e.toString()).join('\\n'));\n      }\n\n      return this.messageBundle;\n    });\n  }\n\n  static create(host: ExtractorHost, options: ExtractorOptions):\n      {extractor: Extractor, staticReflector: StaticReflector} {\n    const htmlParser = new I18NHtmlParser(new HtmlParser());\n\n    const urlResolver = createOfflineCompileUrlResolver();\n    const staticReflector = new StaticReflector(host);\n    StaticAndDynamicReflectionCapabilities.install(staticReflector);\n\n    const config = new CompilerConfig({\n      genDebugInfo: false,\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n      logBindingUpdate: false,\n      useJit: false\n    });\n\n    const normalizer = new DirectiveNormalizer(\n        {get: (url: string) => host.loadResource(url)}, urlResolver, htmlParser, config);\n    const elementSchemaRegistry = new DomElementSchemaRegistry();\n    const resolver = new CompileMetadataResolver(\n        new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector),\n        new PipeResolver(staticReflector), elementSchemaRegistry, normalizer, staticReflector);\n\n    // TODO(vicb): implicit tags & attributes\n    const messageBundle = new MessageBundle(htmlParser, [], {});\n\n    const extractor = new Extractor(options, host, staticReflector, messageBundle, resolver);\n    return {extractor, staticReflector};\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}